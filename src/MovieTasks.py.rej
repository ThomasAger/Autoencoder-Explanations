diff a/src/MovieTasks.py b/src/MovieTasks.py	(rejected hunks)
@@ -454,82 +454,31 @@
                     entities_classes[entity].append(inner_entity)
                     print("found", inner_entity, "added to", entity)
 
-    found_entities = []
-    found_arrays = []
-    class_names = []
     for key, value in list(entities_classes.items()):
-        if len(value) < 30:
-            del entities_classes[key]
-            continue
-        """ Removing entities that aren't in a list
-        found = False
-        for e in entity_names:
-            if key == e:
-                found = True
-        if not found:
+        if len(value) <= 0:
             del entities_classes[key]
-            continue
-        """
-        for v in value:
-            found_entities.append(v)
-        found_arrays.append(value)
-        class_names.append(key)
-    found_entities = np.unique(np.asarray(found_entities))
-    dt.write1dArray(found_entities, "../data/"+data_type+"/classify/"+class_name+"/available_entities.txt")
-
-    # Sort keys and values
-    index = np.argsort(class_names)
-    sorted_class_names = []
-    sorted_value_names = []
-    for i in index:
-        sorted_class_names.append(class_names[i])
-        sorted_value_names.append(found_arrays[i])
-    value_indexes = []
-    # Convert values to indexes
-    for v in range(len(sorted_value_names)):
-        value_index = []
-        for g in range(len(sorted_value_names[v])):
-            for e in range(len(found_entities)):
-                if sorted_value_names[v][g] == found_entities[e]:
-                    value_index.append(e)
-        value_indexes.append(value_index)
-
-    matrix = np.asarray([[0]* len(entities_classes)]*len(found_entities))
-    for c in range(len(sorted_class_names)):
-        print(c)
-        print("-------------------")
-        for v in value_indexes[c]:
-            print(v)
-            matrix[v, c] = 1
-        dt.write1dArray(matrix[c], "../data/placetypes/classify/opencyc/class-" + sorted_class_names[c])
-
-    matrix = np.asarray(matrix)
-
-    dt.write2dArray(matrix, "../data/placetypes/classify/opencyc/class-all")
 
+    #Now create the 2d matrix versions
+
+    print("k")
 
 import pickle
 def importCertificates(cert_fn, entity_name_fn):
     all_lines = dt.import1dArray(cert_fn)[14:]
     en = dt.import1dArray(entity_name_fn)
-    original_en = dt.import1dArray(entity_name_fn)
     en_name = []
     en_year = []
     for e in range(len(en)):
         split = en[e].split()
         en_year.append(split[len(split)-1])
         name = "".join(split[:len(split)-1])
-        en_name.append(dt.removeEverythingFromString(name))
-
+        en_name.append(dt.lowercaseSplit(name))
 
-    # Initialize ratings dict
     ratings = {
         "UK:PG": [],
         "UK:12": [],
         "UK:12A": [],
-        "UK:15": [],
         "UK:18": [],
-        "USA:G": [],
         "USA:PG": [],
         "USA:PG-13": [],
         "USA:R": []
